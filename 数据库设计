员工表
CREATE TABLE staff_members (
    id         bigint            primary key auto_increment comment '主键',
    StaffID INT  NOT NUL COMMENT '工作人员ID',
    Name VARCHAR(255) NOT NULL COMMENT '姓名',
    Position VARCHAR(255) NOT NULL COMMENT '岗位',
    Phone VARCHAR(20) COMMENT '工作人员的联系电话',
    Email VARCHAR(255) COMMENT '工作人员的电子邮箱地址',
    Status ENUM('在职', '离职', '休假') NOT NULL DEFAULT '在职' COMMENT '标识工作人员的在职状态'
) ENGINE=InnoDB COMMENT='工作人员表，用于存储营销系统中管理人员的信息';



客户基础资料表
user_id应为用户的唯一标识

create table user_basic
(
    id         bigint            primary key auto_increment comment '主键',
    user_id    bigint  		    not null unique comment '客户id',
    user_name  varchar(100)     not null comment '姓名', 
    card_id    varchar(40)      not null comment '身份证号',
    age        int            null comment '年龄',
    tel        varchar(40)    not null comment '电话号码',
    sex        char(1)    null comment '性别',
    plan_id     bigint        null comment '套餐ID',
    version     int           null comment '版本（乐观锁）',
    netAccess_time datetime   not null comment '入网时间',
    belong_city    varchar(20)   null  comment '归属地市',
    belong_country varchar(20)   null  comment '归属县区',
    blacklist 			  TINYINT(1)        DEFAULT 0  	comment '是否黑名单',
    redlist 			  TINYINT(1)        DEFAULT 0 	comment '是否红名单',
    create_time   datetime  default CURRENT_TIMESTAMP  not null  comment '创建日期',
    update_time datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP   comment '修改日期'
)
comment '客户基础资料' engine = InnoDB;





套餐表
create table plan
(
    plan_id  		bigint    		  not null comment '套餐ID' 	primary key,
    plan_name       varchar(50)		  not null comment '套餐名称',
    plan_money      DECIMAL(10, 2)    not null comment '套餐费用',
    plan_data	  	DECIMAL(10, 2)    not null comment '套餐内流量（GB）',
    plan_call		bigint			  not null comment '套餐内语音通话时长',
    plan_sms		int				  not null comment '套餐内短信数量',
    create_time  	datetime   		  default CURRENT_TIMESTAMP not null   comment '创建日期',
    update_time    	datetime   		  default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP   comment '修改日期'
)
    comment '套餐表' engine = InnoDB;


客户业务使用行为数据表
create table usage_data
(
    user_id          BIGINT          NOT NULL COMMENT '客户id',
    plan_id          BIGINT          NOT NULL COMMENT '套餐id',
    money            DECIMAL(10, 2)  NOT NULL COMMENT '账户余额',
    data_usage       DECIMAL(10, 2)           COMMENT '数据使用量（GB）',
    call_minutes     INT                      COMMENT '已使用通话分钟数',
    sms_count        INT                      COMMENT '已使用短信数量',
    overage_charges  DECIMAL(10, 2)           COMMENT '流量超额费用',
    create_time      DATETIME        DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '创建日期',
    update_time      DATETIME        DEFAULT CURRENT_TIMESTAMP NOT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '修改日期'
)
    comment '客户业务使用行为数据'  engine = InnoDB;




客户标签表
标签名称 (tag_name): 标签的名称，如“年龄段”、“消费水平”等。
标签描述 (description): 对标签的详细描述，例如“18-25岁年轻群体”、“高消费客户”等。
标签类型 (tag_type): 标识标签的类型，比如“年龄”、“消费等级”、“兴趣爱好”等

create table CustomerTags
(
   tag_id 		   int 		        AUTO_INCREMENT 	comment '标签id'	PRIMARY KEY,
   tag_name 	   varchar(255) 	not null 	comment '标签名称',
   description	   varchar(255)		not null	comment '标签描述', 
   tag_type	       varchar(255) 	not null	comment '标签类型',
   created_time    datetime        DEFAULT CURRENT_TIMESTAMP		comment '创建日期',
   updated_time    datetime        DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP 	comment '修改日期'
) 
  comment '客户标签'  engine = InnoDB;



客户位置数据表
create table location_data
(
    user_id      bigint            not null comment '客户id' primary key,
    place_id     bigint            not null comment '基站id',
    village_id	 bigint            not null comment '小区id',
    create_time  datetime        default CURRENT_TIMESTAMP not null   comment '创建日期',
    update_time  datetime    default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP   comment '修改日期'
) comment '客户位置数据' engine = InnoDB;



目标客户群表
create table group_rt
(
    id              BIGINT AUTO_INCREMENT PRIMARY KEY COMMENT '唯一标识',
    user_id         BIGINT         NOT NULL COMMENT '客户id',
    preview_id      BIGINT         NOT NULL COMMENT '审批人id',
    author_id       BIGINT         NOT NULL COMMENT '创建人id',
    user_group      BIGINT         NOT NULL COMMENT '客户群id',
    group_name      VARCHAR(255)   NOT NULL COMMENT '客户群备注',
    member_count    INT                     COMMENT '群成员数量',
    group_description VARCHAR(255)          COMMENT '群描述',
    create_time     DATETIME       DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '创建日期',
    update_time     DATETIME       DEFAULT CURRENT_TIMESTAMP NOT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '修改日期'
) comment '目标客户群表' engine = InnoDB;





营销用语表
用语ID (phrase_id): 唯一标识每个营销用语的ID。这是主键。
产品ID (product_id): 与营销用语相关联的产品ID。
渠道ID (channel): 表示营销用语使用的渠道，如社交媒体、电子邮件、短信等。
用语标题 (title): 营销用语的标题或简短描述。
用语内容 (content): 具体的营销文案或消息。


create table marketing_language
(
  phrase_id		    int 			    auto_increment 		comment 	'用语id'	primary key,
  plan_id         bigint        not null comment 	'营销产品' ,
  channel		  varchar(255)	not null comment 	'营销渠道' ,
  title			  varchar(255)	not null comment 	'用语标题' ,
  content	  	  varchar(255)  not null comment   '营销话术',
  create_time     datetime  	 default CURRENT_TIMESTAMP not null   comment '创建日期',
  pdate_time	    datetime     default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP   comment '修改日期'
)
    comment '营销用语' engine = InnoDB;



营销活动表

CREATE TABLE marketing_activities (
    ID INT AUTO_INCREMENT PRIMARY KEY COMMENT '唯一标识符，自增主键',
    ActivityName VARCHAR(255) NOT NULL COMMENT '活动名称，用户输入的营销活动名称',
    ActivityType VARCHAR(255) NOT NULL COMMENT '活动模板类型',
    ActivityProvider VARCHAR(255) COMMENT '提供商，指出营销活动的服务提供商',
    ActivitySource VARCHAR(255) COMMENT '活动来源，标识活动是自有平台还是CRM平台等',
    ActivityStatus ENUM('定时', '实时') NOT NULL COMMENT '活动状态，活动是定时发送还是实时发送',
    SendType ENUM('邮件', '短信', 'CRM消息') NOT NULL COMMENT '发送类型，用户选择的活动发送方式',
    SMTPSetting VARCHAR(255) COMMENT 'SMTP设置，如果发送类型为邮件，用户设置的SMTP服务',
    Title VARCHAR(255) COMMENT '邮件标题，如果发送类型为邮件，用户输入的邮件标题',
    Content TEXT COMMENT '邮件内容，如果发送类型为邮件，用户输入的邮件内容',
    LinkURL VARCHAR(255) COMMENT '附件链接，如果活动包含链接，用户输入的URL',
    CreatorName VARCHAR(255) NOT NULL COMMENT '创建者，记录创建活动的人员名称',
    CreatorID VARCHAR(255) NOT NULL COMMENT '创建者ID'
) ENGINE=InnoDB  COMMENT='营销活动表，用于存储营销活动的详细信息';



已完成的营销事件表
create table Realtime_events(
  rt_id           bigint          not null comment '事件id ' primary key,
  rt_event        varchar(255)     not null comment   '事件名称',
  discription    varchar(255)      null comment    '备注',
  create_time    datetime         default CURRENT_TIMESTAMP not null                  comment '创建日期',
  update_time    datetime          default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP   comment '修改日期'
)
    comment '已完成的营销事件 ' engine = InnoDB;

客户基础资料表 (user_basic) 与plan表：一对多关系（一个套餐可以被多个用户订购）。
-- 给 user_basic 表添加外键连接到 plan 表
ALTER TABLE user_basic ADD CONSTRAINT fk_user_basic_plan FOREIGN KEY (plan_id) REFERENCES plan(plan_id);

user_basic与usage_data表：一对一关系（每个用户有一条使用行为数据）。
-- 给 usage_data 表添加外键连接到 user_basic 表
ALTER TABLE usage_data ADD CONSTRAINT fk_usage_data_user_basic FOREIGN KEY (user_id) REFERENCES user_basic(user_id);

user_basic与location_data表：一对一关系（每个用户有一条位置数据）。
ALTER TABLE location_data ADD CONSTRAINT fk_location_data_user_basic FOREIGN KEY (user_id) REFERENCES user_basic(user_id);

客户业务使用行为数据表 (usage_data)与plan表：一对多（一个套餐可以对应多个用户的使用行为数据）。
ALTER TABLE usage_data ADD CONSTRAINT fk_usage_data_plan FOREIGN KEY (plan_id) REFERENCES plan(plan_id);

营销用语表 (marketing_language)与plan表：一对一（一个套餐对应一种营销用语）。
ALTER TABLE marketing_language ADD CONSTRAINT fk_marketing_language_plan FOREIGN KEY (plan_id) REFERENCES plan(plan_id);

user_basic与group_rt：多对多
创建中间表 user_group_relation
CREATE TABLE user_group_relation (
    user_id BIGINT NOT NULL,
    group_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, group_id),
    CONSTRAINT fk_user_group_relation_user FOREIGN KEY (user_id) REFERENCES user_basic(user_id),
    CONSTRAINT fk_user_group_relation_group FOREIGN KEY (group_id) REFERENCES group_rt(id)
)comment '客户群关联表' engine = InnoDB;

user_basic与标签表(CustomerTags):多对多
创建中间表 UserTagRelation
CREATE TABLE UserTagRelation
(
    user_id bigint NOT NULL,
    tag_id int NOT NULL,
    PRIMARY KEY (user_id, tag_id),
    CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES user_basic (user_id),
    CONSTRAINT fk_tag_id FOREIGN KEY (tag_id) REFERENCES CustomerTags (tag_id)
) COMMENT '用户标签关联表' ENGINE = InnoDB;

员工表 (staff_members) 与营销活动表 (marketing_activities): 
在营销活动表中为创建者（CreatorID）设置一个外键，指向员工表的StaffID。
ALTER TABLE marketing_activities 
ADD CONSTRAINT fk_marketing_activities_creator 
FOREIGN KEY (CreatorID) REFERENCES staff_members (StaffID);


员工表 (staff_members) 与其他表的关系: 
员工负责客户群管理、审批等，员工ID需要与客户群表（group_rt）中的审批人ID（preview_id）和创建人ID（author_id）建立外键关系。
ALTER TABLE group_rt 
ADD CONSTRAINT fk_group_rt_preview 
FOREIGN KEY (preview_id) REFERENCES staff_members (StaffID);

ALTER TABLE group_rt 
ADD CONSTRAINT fk_group_rt_author 
FOREIGN KEY (author_id) REFERENCES staff_members (StaffID);
